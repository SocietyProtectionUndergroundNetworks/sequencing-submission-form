"""Add taxonomy per sample

Revision ID: a2c679f0145e
Revises: ae6dd10d2e8d
Create Date: 2025-01-14 07:43:37.582774

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a2c679f0145e'
down_revision: Union[str, None] = 'ae6dd10d2e8d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('taxonomy_domain',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('taxonomy_phylum',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('domain_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['domain_id'], ['taxonomy_domain.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('taxonomy_class',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('phylum_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['phylum_id'], ['taxonomy_phylum.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('taxonomy_order',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('class_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['class_id'], ['taxonomy_class.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('taxonomy_family',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['taxonomy_order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('taxonomy_genus',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('family_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['family_id'], ['taxonomy_family.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('taxonomy_species',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('genus_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['genus_id'], ['taxonomy_genus.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('taxonomy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('domain_id', sa.Integer(), nullable=False),
    sa.Column('phylum_id', sa.Integer(), nullable=True),
    sa.Column('class_id', sa.Integer(), nullable=True),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.Column('family_id', sa.Integer(), nullable=True),
    sa.Column('genus_id', sa.Integer(), nullable=True),
    sa.Column('species_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['class_id'], ['taxonomy_class.id'], ),
    sa.ForeignKeyConstraint(['domain_id'], ['taxonomy_domain.id'], ),
    sa.ForeignKeyConstraint(['family_id'], ['taxonomy_family.id'], ),
    sa.ForeignKeyConstraint(['genus_id'], ['taxonomy_genus.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['taxonomy_order.id'], ),
    sa.ForeignKeyConstraint(['phylum_id'], ['taxonomy_phylum.id'], ),
    sa.ForeignKeyConstraint(['species_id'], ['taxonomy_species.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('otu',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=False),
    sa.Column('taxonomy_id', sa.Integer(), nullable=False),
    sa.Column('abundance', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['sample_id'], ['sequencing_samples.id'], ),
    sa.ForeignKeyConstraint(['taxonomy_id'], ['taxonomy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('otu')
    op.drop_table('taxonomy')
    op.drop_table('taxonomy_species')
    op.drop_table('taxonomy_genus')
    op.drop_table('taxonomy_family')
    op.drop_table('taxonomy_order')
    op.drop_table('taxonomy_class')
    op.drop_table('taxonomy_phylum')
    op.drop_table('taxonomy_domain')
    # ### end Alembic commands ###
