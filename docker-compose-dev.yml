version: '2.4'

services:
  flask: &flask
    build:
      context: .
      dockerfile: Dockerfile-flask
    container_name: spun-flask
    depends_on:
      - db
    expose:
      - 56733
    volumes:
      - .:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS_PATH}:/google_auth_file/key_file.json
    env_file:
      - .env
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/google_auth_file/key_file.json
      - OAUTHLIB_INSECURE_TRANSPORT=1
      - PORT=56733
      - DOCKER_HOST=tcp://socat:2375  # Set Docker host to socat
      - GUNICORN_RELOAD=--reload
      - GUNICORN_WORKERS=1
    networks:
      - flask
    command: ["alembic", "upgrade", "head"]

  celery-worker:
    container_name: spun-celery-worker  # Unique name for the Celery worker container
    build:
      context: .
      dockerfile: Dockerfile-flask
    depends_on:
      - db
      - redis
    expose:
      - 56734
    ports:
      - "5001:5001"  # Example port mapping for Celery worker
    volumes:
      - .:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS_PATH}:/google_auth_file/key_file.json
    env_file:
      - .env
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/google_auth_file/key_file.json
      - OAUTHLIB_INSECURE_TRANSPORT=1
      - PORT=56734
    networks:
      - flask
    entrypoint: celery -A app.celery worker --loglevel=info  # Celery worker command

  r_service:
    build:
      context: .
      dockerfile: Dockerfile-r
    container_name: spun-r-service
    volumes:
      - ./r_scripts:/usr/src/app
      - ./seq_processed:/seq_processed         
    networks:
      - flask
    command: ["tail", "-f", "/dev/null"]

  nginx:
    image: nginx:alpine
    container_name: spun-flask-nginx
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - ./nginx.conf-local-nossh:/etc/nginx/nginx.conf:ro
      - ./certbot/www/:/var/www/certbot/:ro
    networks:
      - flask

  db:
    image: mysql:5.7
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=flask
      - MYSQL_USER=flask
      - MYSQL_PASSWORD=flask
    volumes:
      - ./mysql:/var/lib/mysql      
    networks:
      - database
      - flask
    restart: unless-stopped

  adminer:
    depends_on:
      - db
    volumes:
      - ./config/docker/adminer/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    image: adminer
    ports:
      - 8080:8080
    environment:
      - ADMINER_DESIGN=pepa-linha
      - VIRTUAL_HOST=db.b4b.local
      - VIRTUAL_PORT=8080
    networks:
      - database
    restart: unless-stopped

  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    networks:
      - flask

  lotus2_34:
    image: quay.io/biocontainers/lotus2:2.34.1--hdfd78af_0
    container_name: spun-lotus2_34
    volumes:
      - ./seq_processed:/seq_processed  #v2 processed files
      - ./processing:/processing  #v1 processed files
      - ./lotus2_files:/lotus2_files
    networks:
      - flask
    command: ["tail", "-f", "/dev/null"]  # Keep the container running

  lotus2_28:
    image: quay.io/biocontainers/lotus2:2.28.1--hdfd78af_1
    container_name: spun-lotus2_28
    volumes:
      - ./seq_processed:/seq_processed  #v2 processed files
      - ./processing:/processing  #v1 processed files
      - ./lotus2_files:/lotus2_files
    networks:
      - flask
    command: ["tail", "-f", "/dev/null"]

  flake8:
    build:
      context: .
      dockerfile: Dockerfile-flake8-black
    command: flake8
    volumes:
      - .:/app
    working_dir: /app

  black:
    build:
      context: .
      dockerfile: Dockerfile-flake8-black
    command: black .
    volumes:
      - .:/app
    working_dir: /app

networks:
  default:
    name: default_network
  database:
  flask:
    driver: bridge
