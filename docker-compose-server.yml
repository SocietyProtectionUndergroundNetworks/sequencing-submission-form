services:
  socat:
    image: alpine/socat
    container_name: spun-socat
    networks:
      - flask
    command: 'tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock'
    user: root
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

  flask: &flask
    build:
      context: .
      dockerfile: Dockerfile-flask
      args:
        FLASK_PROCESS_USER: ${FLASK_PROCESS_USER}
        FLASK_PROCESS_USER_ID: ${FLASK_PROCESS_USER_ID}
        FLASK_PROCESS_GROUP_ID: ${FLASK_PROCESS_GROUP_ID}
    container_name: spun-flask
    depends_on:
      - db
    environment:
      - PORT=56733
      - DOCKER_HOST=tcp://socat:2375  # Set Docker host to socat
      - REDIS_URL=redis://redis:6379/0
    expose:
      - 56733
    volumes:
      - .:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS_PATH}:/google_auth_file/key_file.json
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    networks:
      - flask      

  r_service:
    build:
      context: .
      dockerfile: Dockerfile-r
      args:
        FLASK_PROCESS_USER: ${FLASK_PROCESS_USER}
        FLASK_PROCESS_USER_ID: ${FLASK_PROCESS_USER_ID}
        FLASK_PROCESS_GROUP_ID: ${FLASK_PROCESS_GROUP_ID}
    container_name: spun-r-service
    volumes:
      - ./r_scripts:/usr/src/app
      - ./seq_processed:/seq_processed         
    networks:
      - flask
    command: ["tail", "-f", "/dev/null"]

  lotus2:
    build:
      context: .
      dockerfile: Dockerfile-lotus2
      args:
        FLASK_PROCESS_USER: ${FLASK_PROCESS_USER}
        FLASK_PROCESS_USER_ID: ${FLASK_PROCESS_USER_ID}
        FLASK_PROCESS_GROUP_ID: ${FLASK_PROCESS_GROUP_ID}        
    container_name: spun-lotus2
    volumes:
      - ./seq_processed:/seq_processed  #v2 processed files
      - ./processing:/processing  #v1 processed files
      - ./lotus2_files:/lotus2_files
    networks:
      - flask
    command: ["tail", "-f", "/dev/null"]

  celery-worker:
    container_name: spun-celery-worker  # Unique name for the Celery worker container
    build:
      context: .
      dockerfile: Dockerfile-flask
      args:
        FLASK_PROCESS_USER: ${FLASK_PROCESS_USER}
        FLASK_PROCESS_USER_ID: ${FLASK_PROCESS_USER_ID}
        FLASK_PROCESS_GROUP_ID: ${FLASK_PROCESS_GROUP_ID}
    depends_on:
      - db
      - redis
    expose:
      - 56734
    ports:
      - "5001:5001"  # Example port mapping for Celery worker
    volumes:
      - .:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS_PATH}:/google_auth_file/key_file.json
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    environment:
      - PORT=56734
      - DOCKER_HOST=tcp://socat:2375  # Set Docker host to socat
      - CELERY_BROKER_URL=redis://redis:6379/0
    networks:
      - flask
    entrypoint: celery -A app.celery worker --loglevel=info  # Celery worker command


  nginx:
    image: nginx:alpine
    build:
      context: .
      dockerfile: Dockerfile-nginx
    container_name: spun-flask-nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs
    networks:
      - flask

  db:
    image: mysql:5.7
    volumes:
      - ./mysql:/var/lib/mysql
    environment:
      - flask
    env_file:
      - .env
    networks:
      - flask
    restart: unless-stopped

  redis:
    image: "redis:6.2"
    volumes:
      - ./config/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis_data:/data  # Mount a volume for Redis data
    networks:
      - flask
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

networks:
  default:
    name: default_network
  flask:
    driver: bridge
